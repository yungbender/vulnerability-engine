#!/usr/bin/bash

set -e

ORIGINAL_BRANCH="master"
VERSION_REGEXP="[0-9]+\.[0-9]+"
RELEASE_BRANCH_PREFIX="insights-vulnerability-"
DOCKER_COMPOSE_FILE="docker-compose.yml"
PATCH_DOCKERFILES="Dockerfile-manager"
REQUIREMENTS_MAIN_FILE="requirements-dev.txt"
REQUIREMENTS_FILES="requirements-manager.txt requirements-listener.txt requirements-evaluator.txt requirements-vmaas-sync.txt requirements.txt"


if [ "$(git rev-parse --abbrev-ref HEAD)" != "$ORIGINAL_BRANCH" ]; then
    echo "Please checkout $ORIGINAL_BRANCH branch to create new release."
    #exit 1
fi

(
# Git root
cd "$(pwd)/$(git rev-parse --show-cdup)"
print_help=0
if [ "$1" == "-u" ]; then
    if [ "$2" != "" ]; then
        echo "Deleting tag: v$2"
        git tag -d "v$2"
        echo "Deleting branch: $RELEASE_BRANCH_PREFIX$2"
        git branch -D "$RELEASE_BRANCH_PREFIX$2"
    else
        print_help=1
    fi
elif [[ "$1" =~ $VERSION_REGEXP ]]; then
    echo "Do you wanna update all requirements.txt module versions? [y/n]"
    while :
    do
        read -t 30 input

        if [[ "$input" == "y" ]]; then
            pip3 show pur > /dev/null
            pur_status="$?"

            if [[ "$pur_status" == "1" ]]; then
                echo "Python module Pur for requirements update not found, no requirements updated."
                break
            fi

            pur --requirement "$REQUIREMENTS_MAIN_FILE"
            break
        elif [[ "$input" == "n" ]] || [[ "$input" == "" ]]; then
            echo "No requirements updated."
            break
        else
            echo "Please enter y/n."
            continue
        fi
    done

    echo "Creating new tag: v$1"
    git tag "v$1"
    echo "Creating new branch: $RELEASE_BRANCH_PREFIX$1"
    git checkout -b "$RELEASE_BRANCH_PREFIX$1"
    echo "Updating $DOCKER_COMPOSE_FILE..."
    sed -i "s/:latest/:$1/g" "$DOCKER_COMPOSE_FILE"
    for dockerfile in $PATCH_DOCKERFILES; do
	if [ -f "$dockerfile" ] ; then
            sed -i "s/ENV INSIGHTS_VULNERABILITY_VERSION=latest/ENV INSIGHTS_VULNERABILITY_VERSION=$1/g" "$dockerfile"
            git add "$dockerfile"
	fi
    done
    git add "$DOCKER_COMPOSE_FILE"
    git commit -m "Update version to $1"
    git checkout "$ORIGINAL_BRANCH"
    echo ""
    echo "Run:"
    echo "    git push origin $RELEASE_BRANCH_PREFIX$1 && git push origin v$1"

elif [[ "$1" == "-d" ]] || [[ "$1" == "--dry-run" ]]; then
    echo "Checking avaiable module updates in requirements.txt files."

    pip3 show pur > /dev/null
    pur_status="$?"

    if [[ "$pur_status" == "1" ]]; then
        echo "Python module Pur for requirements update not found, no requirements updated."
    else
        echo ""
        pur --requirement "$REQUIREMENTS_MAIN_FILE"

        git checkout -- $REQUIREMENTS_FILES
        echo "DRY RUN, these requirements were not updated."
    fi

else
    print_help=1
fi

if [ $print_help -eq 1 ]; then
    echo "This script creates a new release branch from master."
    echo "Usage:"
    echo "    $0 version"
    echo "    (version matching \"$VERSION_REGEXP\")"
    echo "Example:"
    echo "    $0 0.1"
    echo "Undo:"
    echo "    $0 -u 0.1"
fi
)
